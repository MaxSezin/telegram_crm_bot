"""
Telegram CRM –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ ‚Äî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π MVP —Å —Ä–æ–ª—è–º–∏ –∏ –∑–∞—è–≤–∫–∞–º–∏ (–∫–Ω–æ–ø–∫–∏)
–ê–≤—Ç–æ—Ä: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ChatGPT

–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π: –¢—Ä–µ–Ω–µ—Ä / –ö–ª–∏–µ–Ω—Ç (–≤—ã–±–æ—Ä –ø—Ä–∏ /start)
- –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –≤—ã–±–æ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
- –î–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞: —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–æ–¥–æ–±—Ä–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å), —Å–≤–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–ª–∞—Ç–µ–∂–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ –∏—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –≥—Ä—É–ø–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24—á –∏ 2—á ‚Äî —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É –∏ –∫–ª–∏–µ–Ω—Ç—É
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (ReplyKeyboard + InlineKeyboard), —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ FSM
- –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞/–∫–ª–∏–µ–Ω—Ç–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∫–Ω–æ–ø–∫–æ–π, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∞–≤—Ç–æ-—Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ 9/12/18)

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    pip install aiogram==2.25 python-dateutil

–ó–∞–ø—É—Å–∫:
    export BOT_TOKEN="<—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω>"
    python telegram_crm_bot.py
"""

import os
import sqlite3
import asyncio
import logging
from datetime import datetime, timedelta
from dateutil import parser as dateparser

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton,
    CallbackQuery
)
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv('BOT_TOKEN')
if not API_TOKEN:
    logger.warning("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

DB_FILE = 'crm.db'

# --- Database init ---
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cur = conn.cursor()

cur.execute('''CREATE TABLE IF NOT EXISTS trainers (
    id INTEGER PRIMARY KEY,
    chat_id INTEGER UNIQUE,
    name TEXT,
    created_at TEXT
)''')

cur.execute('''CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY,
    name TEXT,
    phone TEXT,
    notes TEXT,
    balance REAL DEFAULT 0,
    chat_id INTEGER,
    trainer_id INTEGER,
    status TEXT DEFAULT 'approved', -- pending/approved/rejected
    FOREIGN KEY(trainer_id) REFERENCES trainers(id)
)''')

cur.execute('''CREATE TABLE IF NOT EXISTS sessions (
    id INTEGER PRIMARY KEY,
    client_id INTEGER,
    datetime TEXT,
    status TEXT DEFAULT 'planned',
    comment TEXT,
    remind24_sent INTEGER DEFAULT 0,
    remind2_sent INTEGER DEFAULT 0,
    FOREIGN KEY(client_id) REFERENCES clients(id)
)''')

cur.execute('''CREATE TABLE IF NOT EXISTS payments (
    id INTEGER PRIMARY KEY,
    client_id INTEGER,
    amount REAL,
    date TEXT,
    note TEXT,
    FOREIGN KEY(client_id) REFERENCES clients(id)
)''')
conn.commit()

# –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–π –ë–î
try:
    cur.execute("ALTER TABLE clients ADD COLUMN trainer_id INTEGER")
except Exception:
    pass
try:
    cur.execute("ALTER TABLE clients ADD COLUMN status TEXT DEFAULT 'approved'")
except Exception:
    pass
conn.commit()

# --- Helpers & Keyboards ---
PER_PAGE = 10

TRAINER_KB = ReplyKeyboardMarkup(resize_keyboard=True)
TRAINER_KB.row(KeyboardButton('üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã'), KeyboardButton('üìù –ó–∞—è–≤–∫–∏'))
TRAINER_KB.row(KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'), KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
TRAINER_KB.row(KeyboardButton('üí∏ –î–æ–ª–∂–Ω–∏–∫–∏'), KeyboardButton('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))

CLIENT_KB = ReplyKeyboardMarkup(resize_keyboard=True)
CLIENT_KB.row(KeyboardButton('üßë‚Äçüè´ –í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞'), KeyboardButton('üìÖ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'))
CLIENT_KB.row(KeyboardButton('üí∏ –ú–æ–π –±–∞–ª–∞–Ω—Å'))

ROLE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
ROLE_KB.row(KeyboardButton('–Ø —Ç—Ä–µ–Ω–µ—Ä'), KeyboardButton('–Ø –∫–ª–∏–µ–Ω—Ç'))


def parse_dt(text: str) -> datetime:
    text = text.strip()
    try:
        dt = dateparser.parse(text, dayfirst=True)
        if dt is None:
            raise ValueError
        return dt
    except Exception:
        try:
            parts = text.split()
            if len(parts) >= 2:
                datepart, timepart = parts[0], parts[1]
                if datepart.count('.') == 1:
                    year = datetime.now().year
                    dt = datetime.strptime(f"{datepart}.{year} {timepart}", "%d.%m.%Y %H:%M")
                    return dt
        except Exception:
            pass
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: 12.08.2025 18:00")


def get_trainer_chat_ids():
    cur.execute("SELECT chat_id FROM trainers")
    return [r[0] for r in cur.fetchall()]


def ensure_trainer(chat_id: int, name: str = None):
    cur.execute("SELECT id FROM trainers WHERE chat_id = ?", (chat_id,))
    if cur.fetchone() is None:
        cur.execute("INSERT INTO trainers (chat_id, name, created_at) VALUES (?, ?, ?)", (chat_id, name or 'trainer', datetime.utcnow().isoformat()))
        conn.commit()


def get_trainer_id_by_chat(chat_id: int):
    cur.execute("SELECT id FROM trainers WHERE chat_id = ?", (chat_id,))
    row = cur.fetchone()
    return row[0] if row else None


def get_client_by_chat(chat_id: int):
    cur.execute("SELECT id, name, phone, trainer_id, status, balance FROM clients WHERE chat_id = ?", (chat_id,))
    return cur.fetchone()


def get_role(chat_id: int) -> str:
    if get_trainer_id_by_chat(chat_id):
        return 'trainer'
    if get_client_by_chat(chat_id):
        return 'client'
    return 'none'


def build_trainers_kb(page: int = 0) -> InlineKeyboardMarkup:
    cur.execute('SELECT id, name, chat_id FROM trainers ORDER BY id')
    all_rows = cur.fetchall()
    start = page * PER_PAGE
    end = start + PER_PAGE
    rows = all_rows[start:end]
    kb = InlineKeyboardMarkup(row_width=1)
    for tid, name, tchat in rows:
        title = name or f"–¢—Ä–µ–Ω–µ—Ä {tid}"
        kb.add(InlineKeyboardButton(f"{tid}. {title}", callback_data=f"pick_trainer:{tid}"))
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f"trainers_page:{page-1}"))
    if end < len(all_rows):
        nav.append(InlineKeyboardButton('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data=f"trainers_page:{page+1}"))
    if nav:
        kb.row(*nav)
    kb.add(InlineKeyboardButton('üîé –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞', callback_data='search_trainers'))
    return kb


def build_clients_kb_for_trainer(trainer_id: int, page: int = 0) -> InlineKeyboardMarkup:
    cur.execute('SELECT id, name FROM clients WHERE trainer_id = ? AND status = ? ORDER BY id', (trainer_id, 'approved'))
    all_rows = cur.fetchall()
    start = page * PER_PAGE
    end = start + PER_PAGE
    rows = all_rows[start:end]
    kb = InlineKeyboardMarkup(row_width=1)
    for cid, name in rows:
        kb.add(InlineKeyboardButton(f"{cid}. {name}", callback_data=f"client:{cid}"))
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f"myclients_page:{page-1}"))
    if end < len(all_rows):
        nav.append(InlineKeyboardButton('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data=f"myclients_page:{page+1}"))
    if nav:
        kb.row(*nav)
    kb.add(InlineKeyboardButton('üîé –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞', callback_data='search_clients'))
    return kb


def build_client_card_kb(cid: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.row(
        InlineKeyboardButton('‚ûï –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', callback_data=f"add_session:{cid}"),
        InlineKeyboardButton('üí∏ –ü–ª–∞—Ç—ë–∂', callback_data=f"add_payment:{cid}")
    )
    kb.row(
        InlineKeyboardButton('üìú –ò—Å—Ç–æ—Ä–∏—è', callback_data=f"history:{cid}"),
        InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f"edit_client:{cid}")
    )
    kb.add(InlineKeyboardButton('üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç', callback_data=f"link_client:{cid}"))
    return kb


def build_requests_kb(trainer_id: int, page: int = 0) -> InlineKeyboardMarkup:
    cur.execute('SELECT id, name, phone FROM clients WHERE trainer_id = ? AND status = ? ORDER BY id', (trainer_id, 'pending'))
    all_rows = cur.fetchall()
    start = page * PER_PAGE
    end = start + PER_PAGE
    rows = all_rows[start:end]
    kb = InlineKeyboardMarkup(row_width=2)
    for cid, name, phone in rows:
        kb.row(
            InlineKeyboardButton(f"{cid}. {name}", callback_data=f"client:{cid}"),
            InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"approve:{cid}")
        )
        kb.row(InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"reject:{cid}"))
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f"req_page:{page-1}"))
    if end < len(all_rows):
        nav.append(InlineKeyboardButton('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data=f"req_page:{page+1}"))
    if nav:
        kb.row(*nav)
    return kb

# --- FSM States ---
class AddClient(StatesGroup):
    name = State()
    phone = State()
    notes = State()

class AddSession(StatesGroup):
    client_id = State()
    when = State()
    comment = State()

class AddPayment(StatesGroup):
    client_id = State()
    amount = State()
    note = State()

class ClientOnboard(StatesGroup):
    name = State()
    phone = State()

class SearchTrainer(StatesGroup):
    query = State()

class SearchClient(StatesGroup):
    query = State()

class EditClient(StatesGroup):
    client_id = State()
    field = State()
    value = State()

# --- Commands & Role entry ---
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    role = get_role(message.chat.id)
    if role == 'trainer':
        await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=TRAINER_KB)
        return
    if role == 'client':
        await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.", reply_markup=CLIENT_KB)
        return
    await message.answer("–ö—Ç–æ –≤—ã?", reply_markup=ROLE_KB)

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    role = get_role(message.chat.id)
    if role == 'trainer':
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ: üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã, üìù –ó–∞—è–≤–∫–∏, ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, üí∏ –î–æ–ª–∂–Ω–∏–∫–∏, üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", reply_markup=TRAINER_KB)
    elif role == 'client':
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ: üßë‚Äçüè´ –í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞, üìÖ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, üí∏ –ú–æ–π –±–∞–ª–∞–Ω—Å", reply_markup=CLIENT_KB)
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ: –Ø —Ç—Ä–µ–Ω–µ—Ä / –Ø –∫–ª–∏–µ–Ω—Ç", reply_markup=ROLE_KB)

# --- Role choose ---
@dp.message_handler(lambda m: m.text == '–Ø —Ç—Ä–µ–Ω–µ—Ä')
async def i_am_trainer(message: types.Message):
    ensure_trainer(message.chat.id, message.from_user.full_name)
    await message.answer('–ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä ‚úÖ', reply_markup=TRAINER_KB)

@dp.message_handler(lambda m: m.text == '–Ø –∫–ª–∏–µ–Ω—Ç')
async def i_am_client(message: types.Message, state: FSMContext):
    client = get_client_by_chat(message.chat.id)
    if client:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.', reply_markup=CLIENT_KB)
        return
    await ClientOnboard.name.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=ClientOnboard.name)
async def onboard_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await ClientOnboard.phone.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:')

@dp.message_handler(state=ClientOnboard.phone)
async def onboard_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    phone = message.text.strip()
    cur.execute('INSERT INTO clients (name, phone, chat_id, status) VALUES (?, ?, ?, ?)', (name, phone, message.chat.id, 'pending'))
    conn.commit()
    await state.finish()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:', reply_markup=build_trainers_kb(0))

# --- Client actions ---
@dp.message_handler(lambda m: m.text == 'üßë‚Äçüè´ –í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞')
async def client_pick_trainer(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞:', reply_markup=build_trainers_kb(0))

@dp.callback_query_handler(lambda c: c.data == 'search_trainers')
async def cb_search_trainers(call: CallbackQuery, state: FSMContext):
    await SearchTrainer.query.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    await call.answer()

@dp.message_handler(state=SearchTrainer.query)
async def st_search_trainers_query(message: types.Message, state: FSMContext):
    q = f"%{message.text.strip()}%"
    cur.execute('SELECT id, name FROM trainers WHERE name LIKE ? ORDER BY id LIMIT 30', (q,))
    rows = cur.fetchall()
    if not rows:
        await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∫–Ω–æ–ø–∫–æ–π.')
        await state.finish()
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for tid, name in rows:
        kb.add(InlineKeyboardButton(f"{tid}. {name}", callback_data=f"pick_trainer:{tid}"))
    await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', reply_markup=kb)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('trainers_page:'))
async def cb_trainers_page(call: CallbackQuery):
    page = int(call.data.split(':')[1])
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞:')
    await call.message.edit_reply_markup(build_trainers_kb(page))
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('pick_trainer:'))
async def cb_pick_trainer(call: CallbackQuery):
    tid = int(call.data.split(':')[1])
    cur.execute('UPDATE clients SET trainer_id = ?, status = ? WHERE chat_id = ?', (tid, 'pending', call.message.chat.id))
    conn.commit()
    cur.execute('SELECT name, phone, id FROM clients WHERE chat_id = ?', (call.message.chat.id,))
    cname, cphone, cid = cur.fetchone()
    cur.execute('SELECT chat_id, name FROM trainers WHERE id = ?', (tid,))
    trow = cur.fetchone()
    tchat, tname = (trow[0], trow[1]) if trow else (None, '—Ç—Ä–µ–Ω–µ—Ä')
    kb = InlineKeyboardMarkup().row(
        InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"approve:{cid}"),
        InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"reject:{cid}")
    )
    if tchat:
        try:
            await bot.send_message(
                tchat,
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{cid}. {cname} ‚Äî {cphone}",
                reply_markup=kb
            )
        except Exception:
            logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Ç—Ä–µ–Ω–µ—Ä—É')
    await call.message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä—É {tname}. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await call.answer()

@dp.message_handler(lambda m: m.text == 'üìÖ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
async def my_sessions(message: types.Message):
    cur.execute('SELECT id FROM clients WHERE chat_id = ?', (message.chat.id,))
    row = cur.fetchone()
    if not row:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç. –ù–∞–∂–º–∏—Ç–µ /start.')
        return
    cid = row[0]
    now = datetime.utcnow()
    end = now + timedelta(days=60)
    cur.execute('SELECT id, datetime, status, comment FROM sessions WHERE client_id = ? AND datetime BETWEEN ? AND ? ORDER BY datetime', (cid, now.isoformat(), end.isoformat()))
    rows = cur.fetchall()
    if not rows:
        await message.answer('–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.', reply_markup=CLIENT_KB)
        return
    text = "\n".join([f"{r[0]}. {datetime.fromisoformat(r[1]).strftime('%d.%m.%Y %H:%M')} ‚Äî {r[2]} ‚Äî {r[3] or ''}" for r in rows])
    await message.answer(text, reply_markup=CLIENT_KB)

@dp.message_handler(lambda m: m.text == 'üí∏ –ú–æ–π –±–∞–ª–∞–Ω—Å')
async def my_balance(message: types.Message):
    cur.execute('SELECT id, balance FROM clients WHERE chat_id = ?', (message.chat.id,))
    row = cur.fetchone()
    if not row:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç. –ù–∞–∂–º–∏—Ç–µ /start.')
        return
    cid, bal = row
    cur.execute('SELECT amount, date, note FROM payments WHERE client_id = ? ORDER BY date DESC LIMIT 5', (cid,))
    pays = cur.fetchall()
    text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal:.2f}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:"
    if pays:
        for p in pays:
            text += f"\n{p[0]:.2f} ‚Äî {p[1]} ‚Äî {p[2] or ''}"
    else:
        text += "\n‚Äî"
    await message.answer(text, reply_markup=CLIENT_KB)

# --- Trainer actions ---
@dp.message_handler(lambda m: m.text == 'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã')
async def my_clients(message: types.Message):
    tid = get_trainer_id_by_chat(message.chat.id)
    if not tid:
        await message.answer('–í—ã –Ω–µ —Ç—Ä–µ–Ω–µ—Ä. –ù–∞–∂–º–∏—Ç–µ /start.')
        return
    await message.answer('–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã:', reply_markup=build_clients_kb_for_trainer(tid, 0))

@dp.callback_query_handler(lambda c: c.data == 'search_clients')
async def cb_search_clients(call: CallbackQuery, state: FSMContext):
    await SearchClient.query.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    await call.answer()

@dp.message_handler(state=SearchClient.query)
async def st_search_clients_query(message: types.Message, state: FSMContext):
    tid = get_trainer_id_by_chat(message.chat.id)
    q = f"%{message.text.strip()}%"
    cur.execute('SELECT id, name FROM clients WHERE trainer_id = ? AND status = ? AND name LIKE ? ORDER BY id LIMIT 50', (tid, 'approved', q))
    rows = cur.fetchall()
    if not rows:
        await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–æ–π.')
        await state.finish()
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for cid, name in rows:
        kb.add(InlineKeyboardButton(f"{cid}. {name}", callback_data=f"client:{cid}"))
    await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', reply_markup=kb)
    await state.finish()

@dp.message_handler(lambda m: m.text == 'üìù –ó–∞—è–≤–∫–∏')
async def my_requests(message: types.Message):
    tid = get_trainer_id_by_chat(message.chat.id)
    if not tid:
        await message.answer('–í—ã –Ω–µ —Ç—Ä–µ–Ω–µ—Ä.')
        return
    await message.answer('–ó–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤:', reply_markup=build_requests_kb(tid, 0))

@dp.callback_query_handler(lambda c: c.data.startswith('req_page:'))
async def cb_requests_page(call: CallbackQuery):
    tid = get_trainer_id_by_chat(call.message.chat.id)
    page = int(call.data.split(':')[1])
    await call.message.edit_text('–ó–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤:')
    await call.message.edit_reply_markup(build_requests_kb(tid, page))
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('approve:'))
async def cb_approve(call: CallbackQuery):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id, chat_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.', show_alert=True)
        return
    cur.execute("UPDATE clients SET status = 'approved' WHERE id = ?", (cid,))
    conn.commit()
    await call.answer('–ö–ª–∏–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω ‚úÖ', show_alert=False)
    await call.message.edit_reply_markup(build_requests_kb(tid, 0))
    client_chat = row[1]
    if client_chat:
        try:
            await bot.send_message(client_chat, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ', reply_markup=CLIENT_KB)
        except Exception:
            logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏')

@dp.callback_query_handler(lambda c: c.data.startswith('reject:'))
async def cb_reject(call: CallbackQuery):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id, chat_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.', show_alert=True)
        return
    cur.execute("UPDATE clients SET status = 'rejected', trainer_id = NULL WHERE id = ?", (cid,))
    conn.commit()
    await call.answer('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå', show_alert=False)
    await call.message.edit_reply_markup(build_requests_kb(tid, 0))
    client_chat = row[1]
    if client_chat:
        try:
            await bot.send_message(client_chat, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=CLIENT_KB)
        except Exception:
            logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏')

@dp.callback_query_handler(lambda c: c.data.startswith('client:'))
async def cb_client_card(call: CallbackQuery):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT id, name, phone, notes, balance, chat_id, trainer_id, status FROM clients WHERE id = ?', (cid,))
    r = cur.fetchone()
    if not r:
        await call.answer('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    if r[6] != tid:
        await call.answer('–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞–º.', show_alert=True)
        return
    text = (f"ID: {r[0]}\n"
            f"–ò–º—è: {r[1]}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {r[2]}\n"
            f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {r[3]}\n"
            f"–ë–∞–ª–∞–Ω—Å: {r[4]:.2f}\n"
            f"Chat_id: {r[5]}\n"
            f"–°—Ç–∞—Ç—É—Å: {r[7]}")
    await call.message.edit_text(text)
    if r[7] == 'approved':
        await call.message.edit_reply_markup(build_client_card_kb(cid))
    else:
        await call.message.edit_reply_markup(None)
    await call.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (—Ç—Ä–µ–Ω–µ—Ä)
@dp.callback_query_handler(lambda c: c.data.startswith('edit_client:'))
async def cb_edit_client(call: CallbackQuery, state: FSMContext):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤–∞—à.', show_alert=True)
        return
    await state.update_data(client_id=cid)
    kb = InlineKeyboardMarkup(row_width=3)
    kb.row(InlineKeyboardButton('–ò–º—è', callback_data='edit_field:name'),
           InlineKeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω', callback_data='edit_field:phone'),
           InlineKeyboardButton('–ó–∞–º–µ—Ç–∫–∞', callback_data='edit_field:notes'))
    await call.message.answer('–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb)
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('edit_field:'))
async def cb_edit_field(call: CallbackQuery, state: FSMContext):
    field = call.data.split(':')[1]
    await state.update_data(field=field)
    await EditClient.value.set()
    human = '–ò–º—è' if field == 'name' else '–¢–µ–ª–µ—Ñ–æ–Ω' if field == 'phone' else '–ó–∞–º–µ—Ç–∫–∞'
    await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: {human}')
    await call.answer()

@dp.message_handler(state=EditClient.value)
async def st_edit_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cid = data['client_id']
    field = data['field']
    value = message.text.strip()
    if field not in ('name', 'phone', 'notes'):
        await state.finish()
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ.', reply_markup=TRAINER_KB)
        return
    cur.execute(f'UPDATE clients SET {field} = ? WHERE id = ?', (value, cid))
    conn.commit()
    await state.finish()
    await message.answer('–ò–∑–º–µ–Ω–µ–Ω–æ ‚úÖ', reply_markup=TRAINER_KB)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Ç—Ä–µ–Ω–µ—Ä)
@dp.message_handler(lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞')
async def btn_add_client(message: types.Message, state: FSMContext):
    if not get_trainer_id_by_chat(message.chat.id):
        await message.answer('–¢–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=CLIENT_KB)
        return
    await AddClient.name.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:', reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=AddClient.name)
async def add_client_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await AddClient.phone.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:')

@dp.message_handler(state=AddClient.phone)
async def add_client_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await AddClient.notes.set()
    await message.answer('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')

@dp.message_handler(state=AddClient.notes)
async def add_client_notes(message: types.Message, state: FSMContext):
    notes = '' if message.text.strip() == '-' else message.text.strip()
    data = await state.get_data()
    tid = get_trainer_id_by_chat(message.chat.id)
    cur.execute('INSERT INTO clients (name, phone, notes, trainer_id, status) VALUES (?, ?, ?, ?, ?)', (data['name'], data['phone'], notes, tid, 'approved'))
    conn.commit()
    cid = cur.lastrowid
    await state.finish()
    await message.answer(f'–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {data["name"]} (id={cid})', reply_markup=TRAINER_KB)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ç—Ä–µ–Ω–µ—Ä) + –∞–≤—Ç–æ-—Å–ª–æ—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('add_session:'))
async def cb_add_session(call: CallbackQuery, state: FSMContext):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤–∞—à.', show_alert=True)
        return
    await state.update_data(client_id=cid)
    now = datetime.utcnow()
    today = now.replace(hour=0, minute=0, second=0, microsecond=0)
    tomorrow = today + timedelta(days=1)
    def iso(day, h):
        return (day + timedelta(hours=h)).isoformat()
    kb = InlineKeyboardMarkup(row_width=3)
    kb.row(InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è 09:00', callback_data=f"slot:{cid}:{iso(today,9)}"),
           InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è 12:00', callback_data=f"slot:{cid}:{iso(today,12)}"),
           InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è 18:00', callback_data=f"slot:{cid}:{iso(today,18)}"))
    kb.row(InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞ 09:00', callback_data=f"slot:{cid}:{iso(tomorrow,9)}"),
           InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞ 12:00', callback_data=f"slot:{cid}:{iso(tomorrow,12)}"),
           InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞ 18:00', callback_data=f"slot:{cid}:{iso(tomorrow,18)}"))
    kb.add(InlineKeyboardButton('üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', callback_data='slot_manual'))
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:', reply_markup=kb)
    await AddSession.when.set()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('slot:'))
async def cb_pick_slot(call: CallbackQuery, state: FSMContext):
    _ , cid, dt_iso = call.data.split(':', 2)
    await state.update_data(client_id=int(cid), when=datetime.fromisoformat(dt_iso))
    await AddSession.comment.set()
    await call.message.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await call.answer()

@dp.callback_query_handler(lambda c: c.data == 'slot_manual')
async def cb_slot_manual(call: CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.08 18:00):')
    await call.answer()

@dp.message_handler(state=AddSession.when)
async def st_add_session_when(message: types.Message, state: FSMContext):
    try:
        dt = parse_dt(message.text)
    except Exception:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: 12.08.2025 18:00')
        return
    await state.update_data(when=dt)
    await AddSession.comment.set()
    await message.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')

@dp.message_handler(state=AddSession.comment)
async def st_add_session_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    comment = '' if message.text.strip() == '-' else message.text.strip()
    dt_iso = data['when'].isoformat()
    cur.execute('INSERT INTO sessions (client_id, datetime, comment) VALUES (?, ?, ?)', (data['client_id'], dt_iso, comment))
    conn.commit()
    sid = cur.lastrowid
    await state.finish()
    await message.answer(f"–°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ (id={sid}) –Ω–∞ {data['when'].strftime('%d.%m.%Y %H:%M')}", reply_markup=TRAINER_KB)

# –ü–ª–∞—Ç—ë–∂ (—Ç—Ä–µ–Ω–µ—Ä)
@dp.callback_query_handler(lambda c: c.data.startswith('add_payment:'))
async def cb_add_payment(call: CallbackQuery, state: FSMContext):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤–∞—à.', show_alert=True)
        return
    await state.update_data(client_id=cid)
    await AddPayment.amount.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:')
    await call.answer()

@dp.message_handler(state=AddPayment.amount)
async def st_payment_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 1500')
        return
    await state.update_data(amount=amount)
    await AddPayment.note.set()
    await message.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')

@dp.message_handler(state=AddPayment.note)
async def st_payment_note(message: types.Message, state: FSMContext):
    data = await state.get_data()
    note = '' if message.text.strip() == '-' else message.text.strip()
    now = datetime.utcnow().isoformat()
    cur.execute('INSERT INTO payments (client_id, amount, date, note) VALUES (?, ?, ?, ?)', (data['client_id'], data['amount'], now, note))
    cur.execute('UPDATE clients SET balance = balance + ? WHERE id = ?', (data['amount'], data['client_id']))
    conn.commit()
    await state.finish()
    await message.answer(f"–ü–ª–∞—Ç—ë–∂ –∑–∞–ø–∏—Å–∞–Ω: client={data['client_id']}, amount={data['amount']:.2f}", reply_markup=TRAINER_KB)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç—Ä–µ–Ω–µ—Ä) —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–π
@dp.message_handler(lambda m: m.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def trainer_schedule(message: types.Message):
    tid = get_trainer_id_by_chat(message.chat.id)
    if not tid:
        await message.answer('–¢–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=CLIENT_KB)
        return
    now = datetime.utcnow()
    end = now + timedelta(days=30)
    cur.execute('''SELECT s.id, s.client_id, s.datetime, s.status, c.name
                   FROM sessions s LEFT JOIN clients c ON s.client_id=c.id
                   WHERE c.trainer_id = ? AND s.datetime BETWEEN ? AND ?
                   ORDER BY s.datetime''', (tid, now.isoformat(), end.isoformat()))
    rows = cur.fetchall()
    if not rows:
        await message.answer('–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π.', reply_markup=TRAINER_KB)
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for sid, cid, dt_iso, status, cname in rows[:50]:
        dt = datetime.fromisoformat(dt_iso).strftime('%d.%m %H:%M')
        label = f"{sid}: {dt} ‚Äî {cname} ‚Äî {status}"
        if status != 'completed':
            kb.add(InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å {label}", callback_data=f"done_session:{sid}"))
        else:
            kb.add(InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî {label}", callback_data="noop"))
    await message.answer('–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (30 –¥–Ω–µ–π):', reply_markup=kb)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∫–Ω–æ–ø–∫–æ–π
@dp.callback_query_handler(lambda c: c.data.startswith('done_session:'))
async def cb_done_session(call: CallbackQuery):
    sid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('''SELECT s.id FROM sessions s
                   JOIN clients c ON s.client_id = c.id
                   WHERE s.id = ? AND c.trainer_id = ?''', (sid, tid))
    if not cur.fetchone():
        await call.answer('–°–µ—Å—Å–∏—è –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞–º.', show_alert=True)
        return
    cur.execute("UPDATE sessions SET status = 'completed' WHERE id = ?", (sid,))
    conn.commit()
    await call.answer('–ì–æ—Ç–æ–≤–æ ‚úÖ')

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
@dp.message_handler(commands=['complete_session'])
async def complete_session_cmd(message: types.Message):
    tid = get_trainer_id_by_chat(message.chat.id)
    if not tid:
        await message.answer('–¢–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=CLIENT_KB)
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π: /complete_session <id>', reply_markup=TRAINER_KB)
        return
    try:
        sid = int(parts[1])
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π id', reply_markup=TRAINER_KB)
        return
    cur.execute('''SELECT s.id FROM sessions s
                   JOIN clients c ON s.client_id = c.id
                   WHERE s.id = ? AND c.trainer_id = ?''', (sid, tid))
    if not cur.fetchone():
        await message.answer('–≠—Ç–∞ —Å–µ—Å—Å–∏—è –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º.', reply_markup=TRAINER_KB)
        return
    cur.execute('UPDATE sessions SET status = ? WHERE id = ?', ('completed', sid))
    conn.commit()
    await message.answer(f'–°–µ—Å—Å–∏—è {sid} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è', reply_markup=TRAINER_KB)

# --- Background reminders ---
async def reminders_loop():
    logger.info('Reminders loop started')
    while True:
        try:
            now = datetime.utcnow()
            t24_from, t24_to = now + timedelta(hours=24), now + timedelta(hours=24, minutes=1)
            t2_from, t2_to = now + timedelta(hours=2), now + timedelta(hours=2, minutes=1)

            cur.execute('''SELECT s.id, s.client_id, s.datetime, s.comment, c.chat_id, c.name, c.trainer_id
                           FROM sessions s
                           JOIN clients c ON s.client_id=c.id
                           WHERE s.remind24_sent = 0 AND s.status = 'planned' AND s.datetime BETWEEN ? AND ?''',
                        (t24_from.isoformat(), t24_to.isoformat()))
            for sid, cid, dt_iso, comment, client_chat, client_name, trainer_id in cur.fetchall():
                dt = datetime.fromisoformat(dt_iso)
                txt = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {dt.strftime('%d.%m.%Y %H:%M')} ‚Äî {client_name} (id={cid})."
                if comment:
                    txt += "\n" + comment
                cur.execute('SELECT chat_id FROM trainers WHERE id = ?', (trainer_id,))
                row = cur.fetchone()
                if row:
                    tchat = row[0]
                    try:
                        await bot.send_message(tchat, "–ó–∞ 24 —á–∞—Å–∞ ‚Äî " + txt)
                    except Exception:
                        logger.exception('Failed send 24h to trainer')
                if client_chat:
                    try:
                        await bot.send_message(client_chat, f"–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ {dt.strftime('%d.%m.%Y %H:%M')}.")
                    except Exception:
                        logger.exception('Failed send 24h to client')
                cur.execute('UPDATE sessions SET remind24_sent = 1 WHERE id = ?', (sid,))
                conn.commit()

            cur.execute('''SELECT s.id, s.client_id, s.datetime, s.comment, c.chat_id, c.name, c.trainer_id
                           FROM sessions s
                           JOIN clients c ON s.client_id=c.id
                           WHERE s.remind2_sent = 0 AND s.status = 'planned' AND s.datetime BETWEEN ? AND ?''',
                        (t2_from.isoformat(), t2_to.isoformat()))
            for sid, cid, dt_iso, comment, client_chat, client_name, trainer_id in cur.fetchall():
                dt = datetime.fromisoformat(dt_iso)
                txt = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {dt.strftime('%d.%m.%Y %H:%M')} ‚Äî {client_name} (id={cid})."
                if comment:
                    txt += "\n" + comment
                cur.execute('SELECT chat_id FROM trainers WHERE id = ?', (trainer_id,))
                row = cur.fetchone()
                if row:
                    tchat = row[0]
                    try:
                        await bot.send_message(tchat, "–ó–∞ 2 —á–∞—Å–∞ ‚Äî " + txt)
                    except Exception:
                        logger.exception('Failed send 2h to trainer')
                if client_chat:
                    try:
                        await bot.send_message(client_chat, f"–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞: {dt.strftime('%d.%m.%Y %H:%M')}.")
                    except Exception:
                        logger.exception('Failed send 2h to client')
                cur.execute('UPDATE sessions SET remind2_sent = 1 WHERE id = ?', (sid,))
                conn.commit()
        except Exception:
            logger.exception('Error in reminders loop')
        await asyncio.sleep(60)

async def on_startup(dp):
    asyncio.create_task(reminders_loop())
    logger.info('on_startup finished ‚Äî reminders loop scheduled.')

if __name__ == '__main__':
    logger.info('Bot is starting...')
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

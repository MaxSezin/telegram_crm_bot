"""
Telegram CRM –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ ‚Äî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π MVP (–≤—Å—ë –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ)

–§–∏—á–∏:
- –†–æ–ª–∏: —Ç—Ä–µ–Ω–µ—Ä / –∫–ª–∏–µ–Ω—Ç (–≤—ã–±–æ—Ä –ø—Ä–∏ /start), –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Telegram-–ø—Ä–æ—Ñ–∏–ª—è (id, username, first/last/full name)
- –ö–ª–∏–µ–Ω—Ç: –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ (–ª–æ–∫–∞–ª—å–Ω–æ + Nominatim –±–µ–∑ –∫–ª—é—á–∞) ‚Üí –≤—ã–±–æ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞; –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ UUID
- –¢—Ä–µ–Ω–µ—Ä: –∑–∞—è–≤–∫–∏ (approve/reject), —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ), —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–ª–∞—Ç–µ–∂–∏
- –¢–∞—Ä–∏—Ñ—ã/–ø–∞–∫–µ—Ç—ã: –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–µ—Ä; –∫–ª–∏–µ–Ω—Ç –≤–∏–¥–∏—Ç –≤ ¬´‚ÑπÔ∏è –ú–æ–π —Ç—Ä–µ–Ω–µ—Ä¬ª)
- UUID-–∏–Ω–≤–∞–π—Ç: —Ç—Ä–µ–Ω–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥, –∫–ª–∏–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
- –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º; ¬´—É–π—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞¬ª —É –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞)
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 24—á/2—á –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö (Reply/Inline), —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ FSM
- –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã: —è–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, 24—á)

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    pip install aiogram==2.25 python-dateutil aiohttp

–ó–∞–ø—É—Å–∫:
    export BOT_TOKEN="<—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω>"
    python telegram_crm_bot.py
"""

import os
import sqlite3
import asyncio
import logging
import uuid
from datetime import datetime, timedelta
from dateutil import parser as dateparser

import aiohttp

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton,
    CallbackQuery
)
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Bot token ---
API_TOKEN = os.getenv('BOT_TOKEN')
if not API_TOKEN:
    logger.warning("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

DB_FILE = 'crm.db'

# --- –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ (–∫—Ä—É–ø–Ω—ã–µ –†–§ + –î—Ä—É–≥–æ–π) ---
CITIES = [
    '–ú–æ—Å–∫–≤–∞','–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥','–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫','–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥','–ö–∞–∑–∞–Ω—å','–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥','–ß–µ–ª—è–±–∏–Ω—Å–∫','–°–∞–º–∞—Ä–∞','–û–º—Å–∫','–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
    '–£—Ñ–∞','–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫','–í–æ—Ä–æ–Ω–µ–∂','–ü–µ—Ä–º—å','–í–æ–ª–≥–æ–≥—Ä–∞–¥','–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä','–°–∞—Ä–∞—Ç–æ–≤','–¢—é–º–µ–Ω—å','–¢–æ–ª—å—è—Ç—Ç–∏','–ò–∂–µ–≤—Å–∫',
    '–ë–∞—Ä–Ω–∞—É–ª','–ò—Ä–∫—É—Ç—Å–∫','–£–ª—å—è–Ω–æ–≤—Å–∫','–•–∞–±–∞—Ä–æ–≤—Å–∫','–Ø—Ä–æ—Å–ª–∞–≤–ª—å','–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫','–ú–∞—Ö–∞—á–∫–∞–ª–∞','–¢–æ–º—Å–∫','–û—Ä–µ–Ω–±—É—Ä–≥','–ö–µ–º–µ—Ä–æ–≤–æ',
    '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫','–†—è–∑–∞–Ω—å','–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å','–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã','–ü–µ–Ω–∑–∞','–õ–∏–ø–µ—Ü–∫','–ö–∏—Ä–æ–≤','–ß–µ–±–æ–∫—Å–∞—Ä—ã','–ë–∞–ª–∞—à–∏—Ö–∞','–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
    '–¢—É–ª–∞','–ö—É—Ä—Å–∫','–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å','–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å','–£–ª–∞–Ω-–£–¥—ç','–¢–≤–µ—Ä—å','–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫','–ò–≤–∞–Ω–æ–≤–æ','–ë—Ä—è–Ω—Å–∫','–°–æ—á–∏',
    '–ë–µ–ª–≥–æ—Ä–æ–¥','–°—É—Ä–≥—É—Ç','–í–ª–∞–¥–∏–º–∏—Ä','–ß–∏—Ç–∞','–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫','–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª','–ö–∞–ª—É–≥–∞','–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å','–°–º–æ–ª–µ–Ω—Å–∫','–Ø–∫—É—Ç—Å–∫',
    '–ö—É—Ä–≥–∞–Ω','–û—Ä—ë–ª','–ß–µ—Ä–µ–ø–æ–≤–µ—Ü','–í–æ–ª–æ–≥–¥–∞','–ü–æ–¥–æ–ª—å—Å–∫','–ô–æ—à–∫–∞—Ä-–û–ª–∞','–¢–∞–º–±–æ–≤','–ö–æ—Å—Ç—Ä–æ–º–∞','–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫','–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ',
    '–î—Ä—É–≥–æ–π'
]

# --- DB init ---
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cur = conn.cursor()

cur.execute('''CREATE TABLE IF NOT EXISTS trainers (
    id INTEGER PRIMARY KEY,
    chat_id INTEGER UNIQUE,
    name TEXT,
    created_at TEXT,
    city TEXT,
    pricing TEXT,
    tg_id INTEGER,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    invite_code TEXT
)''')

cur.execute('''CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY,
    name TEXT,
    phone TEXT,
    notes TEXT,
    balance REAL DEFAULT 0,
    chat_id INTEGER,
    trainer_id INTEGER,
    status TEXT DEFAULT 'approved',
    tg_id INTEGER,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    FOREIGN KEY(trainer_id) REFERENCES trainers(id)
)''')

cur.execute('''CREATE TABLE IF NOT EXISTS sessions (
    id INTEGER PRIMARY KEY,
    client_id INTEGER,
    datetime TEXT,
    status TEXT DEFAULT 'planned',
    comment TEXT,
    remind24_sent INTEGER DEFAULT 0,
    remind2_sent INTEGER DEFAULT 0,
    FOREIGN KEY(client_id) REFERENCES clients(id)
)''')

cur.execute('''CREATE TABLE IF NOT EXISTS payments (
    id INTEGER PRIMARY KEY,
    client_id INTEGER,
    amount REAL,
    date TEXT,
    note TEXT,
    FOREIGN KEY(client_id) REFERENCES clients(id)
)''')

cur.execute('''CREATE TABLE IF NOT EXISTS tariffs (
    id INTEGER PRIMARY KEY,
    trainer_id INTEGER,
    title TEXT,
    description TEXT,
    price REAL,
    FOREIGN KEY(trainer_id) REFERENCES trainers(id)
)''')
conn.commit()

# –ú–∏–≥—Ä–∞—Ü–∏–∏ (–º—è–≥–∫–∏–µ)
for ddl in [
    "ALTER TABLE trainers ADD COLUMN city TEXT",
    "ALTER TABLE trainers ADD COLUMN pricing TEXT",
    "ALTER TABLE trainers ADD COLUMN tg_id INTEGER",
    "ALTER TABLE trainers ADD COLUMN username TEXT",
    "ALTER TABLE trainers ADD COLUMN first_name TEXT",
    "ALTER TABLE trainers ADD COLUMN last_name TEXT",
    "ALTER TABLE trainers ADD COLUMN invite_code TEXT",
    "ALTER TABLE clients ADD COLUMN tg_id INTEGER",
    "ALTER TABLE clients ADD COLUMN username TEXT",
    "ALTER TABLE clients ADD COLUMN first_name TEXT",
    "ALTER TABLE clients ADD COLUMN last_name TEXT"
]:
    try:
        cur.execute(ddl)
    except Exception:
        pass
conn.commit()

# --- Keyboards ---
PER_PAGE = 10

TRAINER_KB = ReplyKeyboardMarkup(resize_keyboard=True)
TRAINER_KB.row(KeyboardButton('üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã'), KeyboardButton('üìù –ó–∞—è–≤–∫–∏'))
TRAINER_KB.row(KeyboardButton('üîë –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'), KeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
TRAINER_KB.row(KeyboardButton('üí∏ –î–æ–ª–∂–Ω–∏–∫–∏'), KeyboardButton('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
TRAINER_KB.row(KeyboardButton('‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å'))

CLIENT_KB = ReplyKeyboardMarkup(resize_keyboard=True)
CLIENT_KB.row(KeyboardButton('üßë‚Äçüè´ –í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞'), KeyboardButton('üîé –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ UUID'))
CLIENT_KB.row(KeyboardButton('üìÖ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'), KeyboardButton('‚ÑπÔ∏è –ú–æ–π —Ç—Ä–µ–Ω–µ—Ä'))
CLIENT_KB.row(KeyboardButton('üí∏ –ú–æ–π –±–∞–ª–∞–Ω—Å'), KeyboardButton('üö™ –£–π—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞'))

ROLE_KB = ReplyKeyboardMarkup(resize_keyboard=True)
ROLE_KB.row(KeyboardButton('–Ø —Ç—Ä–µ–Ω–µ—Ä'), KeyboardButton('–Ø –∫–ª–∏–µ–Ω—Ç'))

# --- Helpers ---
def parse_dt(text: str) -> datetime:
    text = text.strip()
    try:
        dt = dateparser.parse(text, dayfirst=True)
        if dt is None:
            raise ValueError
        return dt
    except Exception:
        try:
            parts = text.split()
            if len(parts) >= 2:
                datepart, timepart = parts[0], parts[1]
                if datepart.count('.') == 1:
                    year = datetime.now().year
                    dt = datetime.strptime(f"{datepart}.{year} {timepart}", "%d.%m.%Y %H:%M")
                    return dt
        except Exception:
            pass
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –ø—Ä–∏–º–µ—Ä: 12.08.2025 18:00")

def ensure_trainer(chat_id: int, user: types.User):
    cur.execute("SELECT id FROM trainers WHERE chat_id = ?", (chat_id,))
    if cur.fetchone() is None:
        cur.execute(
            "INSERT INTO trainers (chat_id, name, created_at, tg_id, username, first_name, last_name) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (chat_id, user.full_name or 'trainer', datetime.utcnow().isoformat(), user.id, user.username, user.first_name, user.last_name)
        )
        conn.commit()

def get_trainer_id_by_chat(chat_id: int):
    cur.execute("SELECT id FROM trainers WHERE chat_id = ?", (chat_id,))
    row = cur.fetchone()
    return row[0] if row else None

def get_client_by_chat(chat_id: int):
    cur.execute("SELECT id, name, phone, trainer_id, status, balance, tg_id, username FROM clients WHERE chat_id = ?", (chat_id,))
    return cur.fetchone()

def get_role(chat_id: int) -> str:
    if get_trainer_id_by_chat(chat_id):
        return 'trainer'
    if get_client_by_chat(chat_id):
        return 'client'
    return 'none'

def build_trainers_kb(page: int = 0, city: str = None) -> InlineKeyboardMarkup:
    if city and city != '–î—Ä—É–≥–æ–π':
        cur.execute('SELECT id, name FROM trainers WHERE city = ? ORDER BY id', (city,))
    else:
        cur.execute('SELECT id, name FROM trainers ORDER BY id')
    all_rows = cur.fetchall()
    start = page * PER_PAGE
    end = start + PER_PAGE
    rows = all_rows[start:end]
    kb = InlineKeyboardMarkup(row_width=1)
    for tid, name in rows:
        title = name or f"–¢—Ä–µ–Ω–µ—Ä {tid}"
        kb.add(InlineKeyboardButton(f"{tid}. {title}", callback_data=f"pick_trainer:{tid}"))
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f"trainers_page:{page-1}"))
    if end < len(all_rows):
        nav.append(InlineKeyboardButton('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data=f"trainers_page:{page+1}"))
    if nav:
        kb.row(*nav)
    kb.add(InlineKeyboardButton('üîé –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞', callback_data='search_trainers'))
    return kb

def build_clients_kb_for_trainer(trainer_id: int, page: int = 0) -> InlineKeyboardMarkup:
    cur.execute('SELECT id, name FROM clients WHERE trainer_id = ? AND status = ? ORDER BY id', (trainer_id, 'approved'))
    all_rows = cur.fetchall()
    start = page * PER_PAGE
    end = start + PER_PAGE
    rows = all_rows[start:end]
    kb = InlineKeyboardMarkup(row_width=1)
    for cid, name in rows:
        kb.add(InlineKeyboardButton(f"{cid}. {name}", callback_data=f"client:{cid}"))
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f"myclients_page:{page-1}"))
    if end < len(all_rows):
        nav.append(InlineKeyboardButton('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data=f"myclients_page:{page+1}"))
    if nav:
        kb.row(*nav)
    kb.add(InlineKeyboardButton('üîé –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞', callback_data='search_clients'))
    return kb

def build_client_card_kb(cid: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.row(
        InlineKeyboardButton('‚ûï –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', callback_data=f"add_session:{cid}"),
        InlineKeyboardButton('üí∏ –ü–ª–∞—Ç—ë–∂', callback_data=f"add_payment:{cid}")
    )
    kb.row(
        InlineKeyboardButton('üìú –ò—Å—Ç–æ—Ä–∏—è', callback_data=f"history:{cid}"),
        InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f"edit_client:{cid}")
    )
    kb.row(InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', callback_data=f"delete_client:{cid}"))
    kb.add(InlineKeyboardButton('üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç', callback_data=f"link_client:{cid}"))
    return kb

def _unique_preserve(seq):
    seen = set()
    out = []
    for x in seq:
        k = x.strip()
        if k and k.lower() not in seen:
            out.append(k)
            seen.add(k.lower())
    return out

def search_cities_local(query: str, limit: int = 10):
    q = query.strip().lower()
    if not q:
        return []
    matches = [c for c in CITIES if q in c.lower() and c != '–î—Ä—É–≥–æ–π']
    return matches[:limit]

async def search_cities_nominatim(query: str, limit: int = 10):
    url = 'https://nominatim.openstreetmap.org/search'
    params = {
        'q': query,
        'format': 'json',
        'addressdetails': 1,
        'limit': str(limit),
        'countrycodes': 'ru'
    }
    headers = {'User-Agent': 'TrainerLinkBot/1.0 (contact: you@example.com)'}
    async with aiohttp.ClientSession(headers=headers, timeout=aiohttp.ClientTimeout(total=6)) as s:
        async with s.get(url, params=params) as r:
            data = await r.json(content_type=None)
    names = []
    for it in data:
        addr = it.get('address', {})
        city = addr.get('city') or addr.get('town') or addr.get('village') or ''
        if not city:
            dn = (it.get('display_name') or '').split(',')[0]
            city = dn.strip()
        if city:
            names.append(city)
    return _unique_preserve(names)[:limit]

# --- FSM States ---
class AddClient(StatesGroup):
    name = State()
    phone = State()
    notes = State()

class AddSession(StatesGroup):
    client_id = State()
    when = State()
    comment = State()

class AddPayment(StatesGroup):
    client_id = State()
    amount = State()
    note = State()

class ClientOnboard(StatesGroup):
    name = State()
    phone = State()

class SearchTrainer(StatesGroup):
    query = State()

class SearchClient(StatesGroup):
    query = State()

class EditClient(StatesGroup):
    client_id = State()
    field = State()
    value = State()

class EditTrainerProfile(StatesGroup):
    field = State()
    value = State()

class LinkByUUID(StatesGroup):
    code = State()

class AddTariff(StatesGroup):
    title = State()
    description = State()
    price = State()

class DeleteTariff(StatesGroup):
    tariff_id = State()

class SearchCity(StatesGroup):
    query = State()

# --- Commands & Role entry ---
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    role = get_role(message.chat.id)
    if role == 'trainer':
        await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=TRAINER_KB)
        return
    if role == 'client':
        await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.", reply_markup=CLIENT_KB)
        return
    await message.answer("–ö—Ç–æ –≤—ã?", reply_markup=ROLE_KB)

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    role = get_role(message.chat.id)
    if role == 'trainer':
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ: üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã, üìù –ó–∞—è–≤–∫–∏, üîë –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, üí∏ –î–æ–ª–∂–Ω–∏–∫–∏, üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, ‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", reply_markup=TRAINER_KB)
    elif role == 'client':
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ: üßë‚Äçüè´ –í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞, üîé –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ UUID, üìÖ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, üí∏ –ú–æ–π –±–∞–ª–∞–Ω—Å, ‚ÑπÔ∏è –ú–æ–π —Ç—Ä–µ–Ω–µ—Ä, üö™ –£–π—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞", reply_markup=CLIENT_KB)
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ: –Ø —Ç—Ä–µ–Ω–µ—Ä / –Ø –∫–ª–∏–µ–Ω—Ç", reply_markup=ROLE_KB)

# --- Role choose ---
@dp.message_handler(lambda m: m.text == '–Ø —Ç—Ä–µ–Ω–µ—Ä')
async def i_am_trainer(message: types.Message):
    ensure_trainer(message.chat.id, message.from_user)
    await message.answer('–ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä ‚úÖ', reply_markup=TRAINER_KB)

@dp.message_handler(lambda m: m.text == '–Ø –∫–ª–∏–µ–Ω—Ç')
async def i_am_client(message: types.Message, state: FSMContext):
    client = get_client_by_chat(message.chat.id)
    if client:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.', reply_markup=CLIENT_KB)
        return
    cur.execute(
        'INSERT INTO clients (name, phone, chat_id, status, tg_id, username, first_name, last_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
        (message.from_user.full_name, '', message.chat.id, 'pending', message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    )
    conn.commit()
    await state.finish()
    await SearchCity.query.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ï–∫–∞—Ç–µ" –∏–ª–∏ "–†–æ—Å—Ç–æ–≤"):')
# --- City search (client + trainer profile) ---
@dp.message_handler(lambda m: m.text == 'üßë‚Äçüè´ –í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞')
async def client_pick_trainer(message: types.Message, state: FSMContext):
    await SearchCity.query.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ö–∞–∑–∞–Ω—å" –∏–ª–∏ "–°–∞–Ω–∫—Ç"):')
@dp.message_handler(state=SearchCity.query)
async def st_city_query(message: types.Message, state: FSMContext):
    q = message.text.strip()
    local = search_cities_local(q, limit=8)
    try:
        ext = await search_cities_nominatim(q, limit=8)
    except Exception:
        ext = []
    cities = _unique_preserve(local + ext)[:10]
    kb = InlineKeyboardMarkup(row_width=2)
    if cities:
        for c in cities:
            kb.add(InlineKeyboardButton(c, callback_data=f"pick_city:{c}"))
    else:
        kb.add(InlineKeyboardButton('–î—Ä—É–≥–æ–π', callback_data="pick_city:–î—Ä—É–≥–æ–π"))
    # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –≤—ã–∑–≤–∞–ª–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    return_to = data.get('return_to')
    if return_to == 'trainer_city':
        await EditTrainerProfile.field.set()
        await state.update_data(field='city')
    else:
        await state.finish()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=kb)
@dp.callback_query_handler(lambda c: c.data.startswith('pick_city:'), state=EditTrainerProfile.field)
async def cb_set_city(call: CallbackQuery, state: FSMContext):
    city = call.data.split(':', 1)[1]
    tid = get_trainer_id_by_chat(call.message.chat.id)
    if not tid:
        await call.answer('–ù–µ —Ç—Ä–µ–Ω–µ—Ä', show_alert=True); return
    cur.execute('UPDATE trainers SET city = ? WHERE id = ?', (city, tid))
    conn.commit()
    await state.finish()
    await call.message.answer(f'–ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω: {city}', reply_markup=TRAINER_KB)
    await call.answer()
@dp.callback_query_handler(lambda c: c.data.startswith('pick_city:'))
async def cb_pick_city_client(call: CallbackQuery):
    city = call.data.split(':',1)[1]
    await call.message.edit_text(f'–ì–æ—Ä–æ–¥: {city}. –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞:')
    await call.message.edit_reply_markup(build_trainers_kb(0, city=city))
    await call.answer()
@dp.callback_query_handler(lambda c: c.data.startswith('trainers_page:'))
async def cb_trainers_page(call: CallbackQuery):
    page = int(call.data.split(':')[1])
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞:')
    await call.message.edit_reply_markup(build_trainers_kb(page))
    await call.answer()

# --- Client actions ---
@dp.callback_query_handler(lambda c: c.data == 'search_trainers')
async def cb_search_trainers(call: CallbackQuery, state: FSMContext):
    await SearchTrainer.query.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:')
    await call.answer()
@dp.message_handler(state=SearchTrainer.query)
async def st_search_trainers_query(message: types.Message, state: FSMContext):
    q = f"%{message.text.strip()}%"
    cur.execute('SELECT id, name FROM trainers WHERE name LIKE ? ORDER BY id LIMIT 30', (q,))
    rows = cur.fetchall()
    if not rows:
        await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∫–Ω–æ–ø–∫–æ–π.')
        await state.finish()
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for tid, name in rows:
        kb.add(InlineKeyboardButton(f"{tid}. {name}", callback_data=f"pick_trainer:{tid}"))
    await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', reply_markup=kb)
    await state.finish()
@dp.callback_query_handler(lambda c: c.data.startswith('pick_trainer:'))
async def cb_pick_trainer(call: CallbackQuery):
    tid = int(call.data.split(':')[1])
    cur.execute('UPDATE clients SET trainer_id = ?, status = ? WHERE chat_id = ?', (tid, 'pending', call.message.chat.id))
    conn.commit()
    cur.execute('SELECT name, phone, id, tg_id, username FROM clients WHERE chat_id = ?', (call.message.chat.id,))
    cname, cphone, cid, ctg, cuser = cur.fetchone()
    cur.execute('SELECT chat_id, name FROM trainers WHERE id = ?', (tid,))
    trow = cur.fetchone()
    tchat, tname = (trow[0], trow[1]) if trow else (None, '—Ç—Ä–µ–Ω–µ—Ä')
    kb = InlineKeyboardMarkup().row(
        InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"approve:{cid}"),
        InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"reject:{cid}")
    )
    if tchat:
        try:
            await bot.send_message(
                tchat,
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{cid}. {cname} ‚Äî {cphone or '—Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\nTG: @{cuser or '-'} (id={ctg})",
                reply_markup=kb
            )
        except Exception:
            logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Ç—Ä–µ–Ω–µ—Ä—É')
    await call.message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä—É {tname}. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await call.answer()
@dp.message_handler(lambda m: m.text == 'üîé –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ UUID')
async def client_find_trainer_by_uuid(message: types.Message, state: FSMContext):
    await LinkByUUID.code.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ UUID (8 —Å–∏–º–≤–æ–ª–æ–≤), –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª —Ç—Ä–µ–Ω–µ—Ä. –ü—Ä–∏–º–µ—Ä: `A1B2C3D4`', parse_mode='Markdown')
@dp.message_handler(state=LinkByUUID.code)
async def link_by_uuid_submit(message: types.Message, state: FSMContext):
    code = message.text.strip().upper()
    if len(code) != 8:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ 8 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: `A1B2C3D4`', parse_mode='Markdown')
        return
    cur.execute('SELECT id, chat_id, name FROM trainers WHERE invite_code = ?', (code,))
    t = cur.fetchone()
    if not t:
        await message.answer('–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return
    trainer_id, trainer_chat, trainer_name = t
    cur.execute('UPDATE clients SET trainer_id = ?, status = ? WHERE chat_id = ?', (trainer_id, 'approved', message.chat.id))
    conn.commit()
    await state.finish()
    await message.answer(f'–í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç—Ä–µ–Ω–µ—Ä—É: {trainer_name} ‚úÖ', reply_markup=CLIENT_KB)
    try:
        cur.execute('SELECT id, name, phone, tg_id, username FROM clients WHERE chat_id = ?', (message.chat.id,))
        cid, cname, cphone, ctg, cuser = cur.fetchone()
        msg = f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ UUID:\n{cid}. {cname} ‚Äî {cphone or '—Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\nTG: @{cuser or '-'} (id={ctg})"
        if trainer_chat:
            await bot.send_message(trainer_chat, msg)
    except Exception:
        pass
@dp.message_handler(lambda m: m.text == '‚ÑπÔ∏è –ú–æ–π —Ç—Ä–µ–Ω–µ—Ä')
async def my_trainer_info(message: types.Message):
    cur.execute('SELECT trainer_id FROM clients WHERE chat_id = ? AND status = "approved"', (message.chat.id,))
    row = cur.fetchone()
    if not row or not row[0]:
        await message.answer('–¢—Ä–µ–Ω–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –∑–∞—è–≤–∫–∞ –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.')
        return
    tid = row[0]
    cur.execute('SELECT name, city, pricing, tg_id, username FROM trainers WHERE id = ?', (tid,))
    t = cur.fetchone()
    if not t:
        await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
        return
    name, city, pricing, tg_id, username = t
    text = (
        f"–í–∞—à —Ç—Ä–µ–Ω–µ—Ä: {name}\n"
        f"–ì–æ—Ä–æ–¥: {city or '-'}\n"
        f"–¢–∞—Ä–∏—Ñ—ã (–æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ): {pricing or '-'}\n"
        f"Telegram: @{username or '-'} (id={tg_id})"
    )
    cur.execute('SELECT title, description, price FROM tariffs WHERE trainer_id = ? ORDER BY id', (tid,))
    rows = cur.fetchall()
    if rows:
        text += "\n\n–¢–∞—Ä–∏—Ñ—ã/–ø–∞–∫–µ—Ç—ã:"
        for title, desc, price in rows:
            text += f"\n‚Ä¢ {title} ‚Äî {price:.2f}\n  {desc or '-'}"
    await message.answer(text, reply_markup=CLIENT_KB)
@dp.message_handler(lambda m: m.text == 'üìÖ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
async def my_sessions(message: types.Message):
    cur.execute('SELECT id FROM clients WHERE chat_id = ?', (message.chat.id,))
    row = cur.fetchone()
    if not row:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç. –ù–∞–∂–º–∏—Ç–µ /start.')
        return
    cid = row[0]
    now = datetime.utcnow()
    end = now + timedelta(days=60)
    cur.execute(
        'SELECT id, datetime, status, comment FROM sessions WHERE client_id = ? AND datetime BETWEEN ? AND ? ORDER BY datetime',
        (cid, now.isoformat(), end.isoformat())
    )
    rows = cur.fetchall()
    if not rows:
        await message.answer('–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.', reply_markup=CLIENT_KB)
        return
    text = "\n".join([
        f"{r[0]}. {datetime.fromisoformat(r[1]).strftime('%d.%m.%Y %H:%M')} ‚Äî {r[2]} ‚Äî {r[3] or ''}"
        for r in rows
    ])
    await message.answer(text, reply_markup=CLIENT_KB)
@dp.message_handler(lambda m: m.text == 'üí∏ –ú–æ–π –±–∞–ª–∞–Ω—Å')
async def my_balance(message: types.Message):
    cur.execute('SELECT id, balance FROM clients WHERE chat_id = ?', (message.chat.id,))
    row = cur.fetchone()
    if not row:
        await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç. –ù–∞–∂–º–∏—Ç–µ /start.')
        return
    cid, bal = row
    cur.execute('SELECT amount, date, note FROM payments WHERE client_id = ? ORDER BY date DESC LIMIT 5', (cid,))
    pays = cur.fetchall()
    text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal:.2f}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:"
    if pays:
        for p in pays:
            text += f"\n{p[0]:.2f} ‚Äî {p[1]} ‚Äî {p[2] or ''}"
    else:
        text += "\n‚Äî"
    await message.answer(text, reply_markup=CLIENT_KB)
@dp.message_handler(lambda m: m.text == 'üö™ –£–π—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞')
async def client_leave_trainer_start(message: types.Message):
    cur.execute('SELECT trainer_id FROM clients WHERE chat_id = ? AND status = "approved"', (message.chat.id,))
    row = cur.fetchone()
    if not row or not row[0]:
        await message.answer('–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç—Ä–µ–Ω–µ—Ä—É.')
        return
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton('‚úÖ –î–∞, —É–π—Ç–∏', callback_data='leave_trainer:yes'),
        InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='leave_trainer:no')
    )
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Å–≤—è–∑—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º? –¢—Ä–µ–Ω–µ—Ä –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.', reply_markup=kb)
@dp.callback_query_handler(lambda c: c.data.startswith('leave_trainer:'))
async def cb_client_leave_trainer(call: CallbackQuery):
    action = call.data.split(':')[1]
    if action == 'no':
        await call.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')
        await call.message.edit_reply_markup(None)
        return
    cur.execute('SELECT id, name, trainer_id FROM clients WHERE chat_id = ? AND status = "approved"', (call.message.chat.id,))
    row = cur.fetchone()
    if not row:
        await call.answer('–°–≤—è–∑—å —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        await call.message.edit_reply_markup(None)
        return
    cid, cname, tid = row
    cur.execute('SELECT chat_id, name FROM trainers WHERE id = ?', (tid,))
    t = cur.fetchone()
    tchat, _ = (t[0], t[1]) if t else (None, '—Ç—Ä–µ–Ω–µ—Ä')
    cur.execute("UPDATE clients SET trainer_id = NULL, status = 'pending' WHERE id = ?", (cid,))
    conn.commit()
    await call.message.edit_reply_markup(None)
    await call.message.answer('–í—ã –≤—ã—à–ª–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞. –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ.', reply_markup=CLIENT_KB)
    await call.answer('–ì–æ—Ç–æ–≤–æ ‚úÖ')
    if tchat:
        try:
            await bot.send_message(tchat, f'–ö–ª–∏–µ–Ω—Ç {cname} (id={cid}) —É—à—ë–ª –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞.')
        except Exception:
            pass

# --- Trainer actions ---
@dp.message_handler(lambda m: m.text == 'üìã –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã')
async def my_clients(message: types.Message):
    tid = get_trainer_id_by_chat(message.chat.id)
    if not tid:
        await message.answer('–í—ã –Ω–µ —Ç—Ä–µ–Ω–µ—Ä. –ù–∞–∂–º–∏—Ç–µ /start.')
        return
    await message.answer('–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã:', reply_markup=build_clients_kb_for_trainer(tid, 0))
@dp.message_handler(lambda m: m.text == 'üìù –ó–∞—è–≤–∫–∏')
async def my_requests(message: types.Message):
    tid = get_trainer_id_by_chat(message.chat.id)
    if not tid:
        await message.answer('–í—ã –Ω–µ —Ç—Ä–µ–Ω–µ—Ä.')
        return
    await message.answer('–ó–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤:', reply_markup=build_requests_kb(tid, 0))
def build_requests_kb(trainer_id: int, page: int = 0) -> InlineKeyboardMarkup:
    cur.execute('SELECT id, name, phone FROM clients WHERE trainer_id = ? AND status = ? ORDER BY id', (trainer_id, 'pending'))
    all_rows = cur.fetchall()
    start = page * PER_PAGE
    end = start + PER_PAGE
    rows = all_rows[start:end]
    kb = InlineKeyboardMarkup(row_width=2)
    for cid, name, phone in rows:
        kb.row(
            InlineKeyboardButton(f"{cid}. {name}", callback_data=f"client:{cid}"),
            InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f"approve:{cid}")
        )
        kb.row(InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"reject:{cid}"))
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f"req_page:{page-1}"))
    if end < len(all_rows):
        nav.append(InlineKeyboardButton('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data=f"req_page:{page+1}"))
    if nav:
        kb.row(*nav)
    return kb
@dp.callback_query_handler(lambda c: c.data.startswith('req_page:'))
async def cb_requests_page(call: CallbackQuery):
    tid = get_trainer_id_by_chat(call.message.chat.id)
    page = int(call.data.split(':')[1])
    await call.message.edit_text('–ó–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤:')
    await call.message.edit_reply_markup(build_requests_kb(tid, page))
    await call.answer()
@dp.callback_query_handler(lambda c: c.data.startswith('approve:'))
async def cb_approve(call: CallbackQuery):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id, chat_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.', show_alert=True)
        return
    cur.execute("UPDATE clients SET status = 'approved' WHERE id = ?", (cid,))
    conn.commit()
    await call.answer('–ö–ª–∏–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω ‚úÖ', show_alert=False)
    await call.message.edit_reply_markup(build_requests_kb(tid, 0))
    client_chat = row[1]
    if client_chat:
        try:
            await bot.send_message(client_chat, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ', reply_markup=CLIENT_KB)
        except Exception:
            logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏')
@dp.callback_query_handler(lambda c: c.data.startswith('reject:'))
async def cb_reject(call: CallbackQuery):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id, chat_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.', show_alert=True)
        return
    cur.execute("UPDATE clients SET status = 'rejected', trainer_id = NULL WHERE id = ?", (cid,))
    conn.commit()
    await call.answer('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå', show_alert=False)
    await call.message.edit_reply_markup(build_requests_kb(tid, 0))
    client_chat = row[1]
    if client_chat:
        try:
            await bot.send_message(client_chat, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=CLIENT_KB)
        except Exception:
            logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏')

@dp.message_handler(lambda m: m.text == 'üîë –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞')
async def trainer_invite_client(message: types.Message):
    tid = get_trainer_id_by_chat(message.chat.id)
    if not tid:
        await message.answer('–¢–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞.'); return
    code = uuid.uuid4().hex[:8].upper()
    cur.execute('UPDATE trainers SET invite_code = ? WHERE id = ?', (code, tid))
    conn.commit()
    text = (
        "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:\n"
        f"UUID: `{code}`\n\n"
        "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ UUID¬ª –∏ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥."
    )
    await message.answer(text, parse_mode='Markdown', reply_markup=TRAINER_KB)

@dp.message_handler(lambda m: m.text == '‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å')
async def trainer_profile(message: types.Message):
    tid = get_trainer_id_by_chat(message.chat.id)
    if not tid:
        await message.answer('–í—ã –Ω–µ —Ç—Ä–µ–Ω–µ—Ä.')
        return
    cur.execute('SELECT name, city, pricing, tg_id, username, invite_code FROM trainers WHERE id = ?', (tid,))
    name, city, pricing, tg_id, username, inv = cur.fetchone()
    kb = InlineKeyboardMarkup(row_width=2)
    kb.row(
        InlineKeyboardButton('üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='tprof_city'),
        InlineKeyboardButton('üí∞ –¢–∞—Ä–∏—Ñ—ã/–ø–∞–∫–µ—Ç—ã', callback_data='tprof_pricing')
    )
    txt = (
        f"–ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞: {name}\n"
        f"–ì–æ—Ä–æ–¥: {city or '-'}\n"
        f"–¢–∞—Ä–∏—Ñ—ã (–æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ): {pricing or '-'}\n"
        f"Telegram: @{username or '-'} (id={tg_id})\n"
        f"UUID-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {inv or '‚Äî'}"
    )
    await message.answer(txt, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'tprof_city')
async def tprof_city_start(call: CallbackQuery, state: FSMContext):
    await state.update_data(return_to='trainer_city')
    await SearchCity.query.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞:')
    await call.answer()

@dp.callback_query_handler(lambda c: c.data == 'tprof_pricing')
async def tprof_pricing_menu(call: CallbackQuery):
    tid = get_trainer_id_by_chat(call.message.chat.id)
    if not tid:
        await call.answer('–ù–µ —Ç—Ä–µ–Ω–µ—Ä', show_alert=True); return
    cur.execute('SELECT id, title, price FROM tariffs WHERE trainer_id = ? ORDER BY id DESC', (tid,))
    tariffs = cur.fetchall()
    text = "–í–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã/–ø–∞–∫–µ—Ç—ã:\n"
    if tariffs:
        for t_id, title, price in tariffs:
            text += f"- [{t_id}] {title} ‚Äî {price:.2f}\n"
    else:
        text += "‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ."
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ', callback_data='tariff:add'))
    if tariffs:
        kb.add(InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ', callback_data='tariff:delete'))
    await call.message.answer(text, reply_markup=kb)
    await call.answer()

class AddTariff(StatesGroup):
    title = State()
    description = State()
    price = State()

@dp.callback_query_handler(lambda c: c.data == 'tariff:add')
async def tariff_add_start(call: CallbackQuery, state: FSMContext):
    await AddTariff.title.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* —Ç–∞—Ä–∏—Ñ–∞/–ø–∞–∫–µ—Ç–∞:', parse_mode='Markdown')
    await call.answer()

@dp.message_handler(state=AddTariff.title)
async def tariff_add_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await AddTariff.description.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ *–æ–ø–∏—Å–∞–Ω–∏–µ* —Ç–∞—Ä–∏—Ñ–∞/–ø–∞–∫–µ—Ç–∞:', parse_mode='Markdown')

@dp.message_handler(state=AddTariff.description)
async def tariff_add_desc(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await AddTariff.price.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ *—Ü–µ–Ω—É* (—á–∏—Å–ª–æ):', parse_mode='Markdown')

@dp.message_handler(state=AddTariff.price)
async def tariff_add_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.00')
        return
    data = await state.get_data()
    tid = get_trainer_id_by_chat(message.chat.id)
    cur.execute(
        'INSERT INTO tariffs (trainer_id, title, description, price) VALUES (?, ?, ?, ?)',
        (tid, data['title'], data['description'], price)
    )
    conn.commit()
    await state.finish()
    await message.answer('–¢–∞—Ä–∏—Ñ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ', reply_markup=TRAINER_KB)

class DeleteTariff(StatesGroup):
    tariff_id = State()

@dp.callback_query_handler(lambda c: c.data == 'tariff:delete')
async def tariff_delete_start(call: CallbackQuery, state: FSMContext):
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT id, title FROM tariffs WHERE trainer_id = ? ORDER BY id DESC', (tid,))
    rows = cur.fetchall()
    if not rows:
        await call.message.answer('–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.')
        await call.answer(); return
    txt = "–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" + "\n".join([f"- [{r[0]}] {r[1]}" for r in rows])
    await DeleteTariff.tariff_id.set()
    await call.message.answer(txt)
    await call.answer()

@dp.message_handler(state=DeleteTariff.tariff_id)
async def tariff_delete_confirm(message: types.Message, state: FSMContext):
    try:
        t_id = int(message.text.strip())
    except ValueError:
        await message.answer('–ù—É–∂–Ω–æ —á–∏—Å–ª–æ ‚Äî ID —Ç–∞—Ä–∏—Ñ–∞.')
        return
    tid = get_trainer_id_by_chat(message.chat.id)
    cur.execute('DELETE FROM tariffs WHERE id = ? AND trainer_id = ?', (t_id, tid))
    conn.commit()
    await state.finish()
    await message.answer('–¢–∞—Ä–∏—Ñ —É–¥–∞–ª—ë–Ω ‚úÖ', reply_markup=TRAINER_KB)

@dp.callback_query_handler(lambda c: c.data.startswith('client:'))
async def cb_client_card(call: CallbackQuery):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT id, name, phone, notes, balance, chat_id, trainer_id, status, tg_id, username FROM clients WHERE id = ?', (cid,))
    r = cur.fetchone()
    if not r:
        await call.answer('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    if r[6] != tid:
        await call.answer('–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞–º.', show_alert=True)
        return
    text = (
        f"ID: {r[0]}\n"
        f"–ò–º—è: {r[1]}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {r[2]}\n"
        f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {r[3]}\n"
        f"–ë–∞–ª–∞–Ω—Å: {r[4]:.2f}\n"
        f"Chat_id: {r[5]}\n"
        f"TG: @{r[9] or '-'} (id={r[8]})\n"
        f"–°—Ç–∞—Ç—É—Å: {r[7]}"
    )
    await call.message.edit_text(text)
    if r[7] == 'approved':
        await call.message.edit_reply_markup(build_client_card_kb(cid))
    else:
        await call.message.edit_reply_markup(None)
    await call.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
@dp.callback_query_handler(lambda c: c.data.startswith('delete_client:'))
async def cb_delete_client(call: CallbackQuery):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT name, trainer_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row:
        await call.answer('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True); return
    if row[1] != tid:
        await call.answer('–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞–º.', show_alert=True); return
    name = row[0]
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data=f"confirm_del_client:{cid}"),
        InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data="cancel_del_client")
    )
    await call.message.answer(f'–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {name}? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.', reply_markup=kb)
    await call.answer()

@dp.callback_query_handler(lambda c: c.data == 'cancel_del_client')
async def cb_cancel_del_client(call: CallbackQuery):
    await call.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')
    await call.message.edit_reply_markup(None)

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_del_client:'))
async def cb_confirm_del_client(call: CallbackQuery):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id, chat_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞–º.', show_alert=True); return
    client_chat = row[1]
    cur.execute('DELETE FROM sessions WHERE client_id = ?', (cid,))
    cur.execute('DELETE FROM payments WHERE client_id = ?', (cid,))
    cur.execute('DELETE FROM clients WHERE id = ?', (cid,))
    conn.commit()
    await call.answer('–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω ‚úÖ')
    await call.message.edit_reply_markup(None)
    await call.message.answer('–ö–ª–∏–µ–Ω—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.', reply_markup=TRAINER_KB)
    if client_chat:
        try:
            await bot.send_message(client_chat, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É —Ç—Ä–µ–Ω–µ—Ä–∞ –±—ã–ª —É–¥–∞–ª—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=CLIENT_KB)
        except Exception:
            pass

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ç—Ä–µ–Ω–µ—Ä) + –∞–≤—Ç–æ-—Å–ª–æ—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('add_session:'))
async def cb_add_session(call: CallbackQuery, state: FSMContext):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤–∞—à.', show_alert=True)
        return
    await state.update_data(client_id=cid)
    now = datetime.utcnow()
    today = now.replace(hour=0, minute=0, second=0, microsecond=0)
    tomorrow = today + timedelta(days=1)
    def iso(day, h): return (day + timedelta(hours=h)).isoformat()
    kb = InlineKeyboardMarkup(row_width=3)
    kb.row(
        InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è 09:00', callback_data=f"slot:{cid}:{iso(today,9)}"),
        InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è 12:00', callback_data=f"slot:{cid}:{iso(today,12)}"),
        InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è 18:00', callback_data=f"slot:{cid}:{iso(today,18)}")
    )
    kb.row(
        InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞ 09:00', callback_data=f"slot:{cid}:{iso(tomorrow,9)}"),
        InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞ 12:00', callback_data=f"slot:{cid}:{iso(tomorrow,12)}"),
        InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞ 18:00', callback_data=f"slot:{cid}:{iso(tomorrow,18)}")
    )
    kb.add(InlineKeyboardButton('üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', callback_data='slot_manual'))
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:', reply_markup=kb)
    await AddSession.when.set()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('slot:'))
async def cb_pick_slot(call: CallbackQuery, state: FSMContext):
    _, cid, dt_iso = call.data.split(':', 2)
    await state.update_data(client_id=int(cid), when=datetime.fromisoformat(dt_iso))
    await AddSession.comment.set()
    await call.message.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await call.answer()

@dp.callback_query_handler(lambda c: c.data == 'slot_manual')
async def cb_slot_manual(call: CallbackQuery):
    await call.message.answer('–û–∂–∏–¥–∞—é –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (24—á).\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12.08.2025 18:00')
    await call.answer()

@dp.message_handler(state=AddSession.when)
async def st_add_session_when(message: types.Message, state: FSMContext):
    try:
        dt = parse_dt(message.text)
    except Exception:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú. –ü—Ä–∏–º–µ—Ä: 12.08.2025 18:00')
        return
    await state.update_data(when=dt)
    await AddSession.comment.set()
    await message.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')

@dp.message_handler(state=AddSession.comment)
async def st_add_session_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    comment = '' if message.text.strip() == '-' else message.text.strip()
    dt_iso = data['when'].isoformat()
    cur.execute('INSERT INTO sessions (client_id, datetime, comment) VALUES (?, ?, ?)', (data['client_id'], dt_iso, comment))
    conn.commit()
    sid = cur.lastrowid
    await state.finish()
    await message.answer(f"–°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ (id={sid}) –Ω–∞ {data['when'].strftime('%d.%m.%Y %H:%–ú')}", reply_markup=TRAINER_KB)

# –ü–ª–∞—Ç—ë–∂ (—Ç—Ä–µ–Ω–µ—Ä)
@dp.callback_query_handler(lambda c: c.data.startswith('add_payment:'))
async def cb_add_payment(call: CallbackQuery, state: FSMContext):
    cid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('SELECT trainer_id FROM clients WHERE id = ?', (cid,))
    row = cur.fetchone()
    if not row or row[0] != tid:
        await call.answer('–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤–∞—à.', show_alert=True)
        return
    await state.update_data(client_id=cid)
    await AddPayment.amount.set()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:')
    await call.answer()

@dp.message_handler(state=AddPayment.amount)
async def st_payment_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 1500')
        return
    await state.update_data(amount=amount)
    await AddPayment.note.set()
    await message.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')

@dp.message_handler(state=AddPayment.note)
async def st_payment_note(message: types.Message, state: FSMContext):
    data = await state.get_data()
    note = '' if message.text.strip() == '-' else message.text.strip()
    now = datetime.utcnow().isoformat()
    cur.execute('INSERT INTO payments (client_id, amount, date, note) VALUES (?, ?, ?, ?)', (data['client_id'], data['amount'], now, note))
    cur.execute('UPDATE clients SET balance = balance + ? WHERE id = ?', (data['amount'], data['client_id']))
    conn.commit()
    await state.finish()
    await message.answer(f"–ü–ª–∞—Ç—ë–∂ –∑–∞–ø–∏—Å–∞–Ω: client={data['client_id']}, amount={data['amount']:.2f}", reply_markup=TRAINER_KB)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç—Ä–µ–Ω–µ—Ä) —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–π
@dp.message_handler(lambda m: m.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def trainer_schedule(message: types.Message):
    tid = get_trainer_id_by_chat(message.chat.id)
    if not tid:
        await message.answer('–¢–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞.', reply_markup=CLIENT_KB)
        return
    now = datetime.utcnow()
    end = now + timedelta(days=30)
    cur.execute('''SELECT s.id, s.client_id, s.datetime, s.status, c.name
                   FROM sessions s LEFT JOIN clients c ON s.client_id=c.id
                   WHERE c.trainer_id = ? AND s.datetime BETWEEN ? AND ?
                   ORDER BY s.datetime''', (tid, now.isoformat(), end.isoformat()))
    rows = cur.fetchall()
    if not rows:
        await message.answer('–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π.', reply_markup=TRAINER_KB)
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for sid, _, dt_iso, status, cname in rows[:50]:
        dt = datetime.fromisoformat(dt_iso).strftime('%d.%m %H:%M')
        label = f"{sid}: {dt} ‚Äî {cname} ‚Äî {status}"
        if status != 'completed':
            kb.add(InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å {label}", callback_data=f"done_session:{sid}"))
        else:
            kb.add(InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî {label}", callback_data="noop"))
    await message.answer('–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (30 –¥–Ω–µ–π):', reply_markup=kb)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∫–Ω–æ–ø–∫–æ–π
@dp.callback_query_handler(lambda c: c.data.startswith('done_session:'))
async def cb_done_session(call: CallbackQuery):
    sid = int(call.data.split(':')[1])
    tid = get_trainer_id_by_chat(call.message.chat.id)
    cur.execute('''SELECT s.id FROM sessions s
                   JOIN clients c ON s.client_id = c.id
                   WHERE s.id = ? AND c.trainer_id = ?''', (sid, tid))
    if not cur.fetchone():
        await call.answer('–°–µ—Å—Å–∏—è –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞–º.', show_alert=True)
        return
    cur.execute("UPDATE sessions SET status = 'completed' WHERE id = ?", (sid,))
    conn.commit()
    await call.answer('–ì–æ—Ç–æ–≤–æ ‚úÖ')

# --- –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ ---
@dp.message_handler(lambda m: m.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats_stub(message: types.Message):
    await message.answer('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ üôÇ', reply_markup=TRAINER_KB)
@dp.message_handler(lambda m: m.text == 'üí∏ –î–æ–ª–∂–Ω–∏–∫–∏')
async def debtors_stub(message: types.Message):
    await message.answer('–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ üôÇ', reply_markup=TRAINER_KB)

# --- Background reminders ---
async def reminders_loop():
    logger.info('Reminders loop started')
    while True:
        try:
            now = datetime.utcnow()
            t24_from, t24_to = now + timedelta(hours=24), now + timedelta(hours=24, minutes=1)
            t2_from, t2_to = now + timedelta(hours=2), now + timedelta(hours=2, minutes=1)

            cur.execute('''SELECT s.id, s.client_id, s.datetime, s.comment, c.chat_id, c.name, c.trainer_id
                           FROM sessions s
                           JOIN clients c ON s.client_id=c.id
                           WHERE s.remind24_sent = 0 AND s.status = 'planned' AND s.datetime BETWEEN ? AND ?''',
                        (t24_from.isoformat(), t24_to.isoformat()))
            for sid, cid, dt_iso, comment, client_chat, client_name, trainer_id in cur.fetchall():
                dt = datetime.fromisoformat(dt_iso)
                txt = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {dt.strftime('%d.%m.%Y %H:%M')} ‚Äî {client_name} (id={cid})."
                if comment:
                    txt += "\n" + comment
                cur.execute('SELECT chat_id FROM trainers WHERE id = ?', (trainer_id,))
                row = cur.fetchone()
                if row:
                    tchat = row[0]
                    try:
                        await bot.send_message(tchat, "–ó–∞ 24 —á–∞—Å–∞ ‚Äî " + txt)
                    except Exception:
                        logger.exception('Failed send 24h to trainer')
                if client_chat:
                    try:
                        await bot.send_message(client_chat, f"–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ {dt.strftime('%d.%m.%Y %H:%M')}.")
                    except Exception:
                        logger.exception('Failed send 24h to client')
                cur.execute('UPDATE sessions SET remind24_sent = 1 WHERE id = ?', (sid,))
                conn.commit()

            cur.execute('''SELECT s.id, s.client_id, s.datetime, s.comment, c.chat_id, c.name, c.trainer_id
                           FROM sessions s
                           JOIN clients c ON s.client_id=c.id
                           WHERE s.remind2_sent = 0 AND s.status = 'planned' AND s.datetime BETWEEN ? AND ?''',
                        (t2_from.isoformat(), t2_to.isoformat()))
            for sid, cid, dt_iso, comment, client_chat, client_name, trainer_id in cur.fetchall():
                dt = datetime.fromisoformat(dt_iso)
                txt = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {dt.strftime('%d.%m.%Y %H:%–ú')} ‚Äî {client_name} (id={cid})."
                if comment:
                    txt += "\n" + comment
                cur.execute('SELECT chat_id FROM trainers WHERE id = ?', (trainer_id,))
                row = cur.fetchone()
                if row:
                    tchat = row[0]
                    try:
                        await bot.send_message(tchat, "–ó–∞ 2 —á–∞—Å–∞ ‚Äî " + txt)
                    except Exception:
                        logger.exception('Failed send 2h to trainer')
                if client_chat:
                    try:
                        await bot.send_message(client_chat, f"–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞: {dt.strftime('%d.%m.%Y %H:%M')}.")
                    except Exception:
                        logger.exception('Failed send 2h to client')
                cur.execute('UPDATE sessions SET remind2_sent = 1 WHERE id = ?', (sid,))
                conn.commit()
        except Exception:
            logger.exception('Error in reminders loop')
        await asyncio.sleep(60)

# --- Startup ---
async def on_startup(dp):
    asyncio.create_task(reminders_loop())
    logger.info('on_startup finished ‚Äî reminders loop scheduled.')

if __name__ == '__main__':
    logger.info('Bot is starting...')
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)